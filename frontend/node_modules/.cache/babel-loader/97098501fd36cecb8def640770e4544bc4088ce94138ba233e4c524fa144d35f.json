{"ast":null,"code":"var _jsxFileName = \"D:\\\\PROJECT CS\\\\unified-stego-system\\\\frontend\\\\src\\\\components\\\\Encode.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Encode() {\n  _s();\n  const [inputType, setInputType] = useState(\"text\"); // \"text\" or \"image\"\n  const [text, setText] = useState(\"\");\n  const [imageFile, setImageFile] = useState(null); // For image input type (future use)\n  const [medium, setMedium] = useState(\"WhatsApp\");\n  const [confidentiality, setConfidentiality] = useState(\"casual\");\n  const [allowAI, setAllowAI] = useState(true);\n  const [aiDecision, setAIDecision] = useState(null);\n  const [confirmed, setConfirmed] = useState(false);\n  const [manualEncoding, setManualEncoding] = useState(\"pdf\"); // Manual choice (future use for other types)\n  const [response, setResponse] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [encodedImage, setEncodedImage] = useState(null); // Stores the URL of the encoded image\n\n  // Step 1: Ask AI decision if allowed\n  const getAIDecision = async () => {\n    setLoading(true);\n    setResponse(\"\");\n    setEncodedImage(null); // Clear previous image on new attempt\n\n    let formData = new FormData();\n    // Append all relevant form data for AI decision\n    formData.append(\"inputType\", inputType); // Send inputType for AI decision as well\n    formData.append(\"medium\", medium);\n    formData.append(\"confidentiality\", confidentiality);\n    formData.append(\"allowAI\", allowAI);\n    try {\n      const res = await fetch(\"http://localhost:5000/decide_encoding\", {\n        method: \"POST\",\n        body: formData // Use FormData for Flask's request.form\n      });\n      const data = await res.json();\n      if (res.ok) {\n        // Check if the response status is successful (2xx)\n        setAIDecision(data.aiDecision);\n        setResponse(data.message);\n      } else {\n        setResponse(`Error: ${data.message || 'Failed to get AI decision.'}`);\n      }\n    } catch (err) {\n      console.error(\"Error fetching AI decision:\", err);\n      setResponse(\"Error connecting to server for AI decision.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Step 2: User confirms AI decision or chooses own encoding\n  const handleEncode = async e => {\n    e.preventDefault();\n\n    // If AI is allowed and not yet confirmed, first trigger AI decision\n    if (allowAI && aiDecision === null) {\n      await getAIDecision();\n      // Do not proceed with encoding immediately after getting AI decision\n      // The user needs to confirm, which will trigger handleEncode again.\n      return;\n    }\n\n    // If AI is allowed and a decision has been made, but not confirmed,\n    // it means the user clicked 'Encode' again *after* seeing the AI suggestion\n    // without clicking 'Confirm'. So, we assume they want to proceed with the AI decision.\n    if (allowAI && aiDecision !== null && !confirmed) {\n      setConfirmed(true); // Auto-confirm AI decision if 'Encode' clicked after suggestion\n    }\n    setLoading(true);\n    setResponse(\"\");\n    setEncodedImage(null); // Clear previous image on new attempt\n\n    let formData = new FormData();\n    formData.append(\"inputType\", inputType);\n    if (inputType === \"text\") {\n      formData.append(\"text\", text);\n    } else if (inputType === \"image\" && imageFile) {\n      // This part is for future image-in-image encoding\n      formData.append(\"image\", imageFile);\n    }\n    formData.append(\"medium\", medium);\n    formData.append(\"confidentiality\", confidentiality);\n    formData.append(\"allowAI\", allowAI);\n    // Pass the actual encoding method to the backend\n    formData.append(\"encoding\", allowAI && confirmed ? aiDecision : manualEncoding);\n    try {\n      const res = await fetch(\"http://localhost:5000/encode\", {\n        method: \"POST\",\n        body: formData // Use FormData for Flask's request.form\n      });\n      const data = await res.json();\n      if (res.ok) {\n        // Check if the response status is successful (2xx)\n        setResponse(data.message);\n        if (data.encoded_image_url) {\n          setEncodedImage(data.encoded_image_url);\n        } else {\n          setEncodedImage(null);\n        }\n      } else {\n        setResponse(`Error: ${data.message || 'Encoding failed.'}`);\n        setEncodedImage(null);\n      }\n    } catch (err) {\n      console.error(\"Error during encoding:\", err);\n      setResponse(\"Error connecting to server for encoding.\");\n      setEncodedImage(null);\n    } finally {\n      setLoading(false);\n      setConfirmed(false); // Reset confirmation state after encoding attempt\n      setAIDecision(null); // Reset AI decision as well\n    }\n  };\n\n  // Reset AI decision and confirmation when AI permission toggled\n  const toggleAllowAI = () => {\n    setAllowAI(!allowAI);\n    setAIDecision(null);\n    setConfirmed(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"500px\",\n      margin: \"auto\",\n      padding: \"1rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: \"1rem\",\n        textAlign: \"center\"\n      },\n      children: \"Encode Your Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleEncode,\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Choose Input Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: inputType,\n          onChange: e => {\n            setInputType(e.target.value);\n            setText(\"\"); // Clear text when switching type\n            setImageFile(null); // Clear image when switching type\n          },\n          style: {\n            width: \"100%\",\n            padding: \"0.5rem\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ccc\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"text\",\n            children: \"Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), inputType === \"text\" && /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Enter your secret message\",\n        rows: 4,\n        style: {\n          width: \"100%\",\n          padding: \"0.5rem\",\n          borderRadius: \"4px\",\n          border: \"1px solid #ccc\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }, this), inputType === \"image\" && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Currently only text input supported for encoding.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }, this)\n      // <input\n      //   type=\"file\"\n      //   accept=\"image/*\"\n      //   onChange={(e) => setImageFile(e.target.files[0])}\n      //   style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\n      // />\n      , /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Medium:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: medium,\n          onChange: e => setMedium(e.target.value),\n          style: {\n            width: \"100%\",\n            padding: \"0.5rem\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ccc\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"WhatsApp\",\n            children: \"WhatsApp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Telegram\",\n            children: \"Telegram\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Other\",\n            children: \"Other\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Confidentiality:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: confidentiality,\n          onChange: e => setConfidentiality(e.target.value),\n          style: {\n            width: \"100%\",\n            padding: \"0.5rem\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ccc\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"casual\",\n            children: \"Casual\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"professional\",\n            children: \"Professional\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"high\",\n            children: \"High Security\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"0.5rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: allowAI,\n          onChange: toggleAllowAI\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }, this), \"Allow AI to decide encoding method\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this), !allowAI && /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Choose Encoding Manually:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: manualEncoding,\n          onChange: e => setManualEncoding(e.target.value),\n          style: {\n            width: \"100%\",\n            padding: \"0.5rem\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ccc\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pdf\",\n            children: \"PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"image\",\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"qr\",\n            children: \"QR Code\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }, this), allowAI && aiDecision && !confirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"1rem\",\n          backgroundColor: \"#f0f0f0\",\n          padding: \"1rem\",\n          borderRadius: \"8px\",\n          border: \"1px solid #ddd\",\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: \"0 0 1rem 0\"\n          },\n          children: [\"AI suggests encoding using: \", /*#__PURE__*/_jsxDEV(\"b\", {\n            style: {\n              color: \"#007bff\"\n            },\n            children: aiDecision\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setConfirmed(true),\n          style: {\n            marginRight: \"1rem\",\n            padding: \"0.5rem 1rem\",\n            borderRadius: \"5px\",\n            border: \"none\",\n            backgroundColor: \"#28a745\",\n            color: \"white\",\n            cursor: \"pointer\"\n          },\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => {\n            setAIDecision(null);\n            setConfirmed(false);\n          },\n          style: {\n            padding: \"0.5rem 1rem\",\n            borderRadius: \"5px\",\n            border: \"1px solid #dc3545\",\n            backgroundColor: \"transparent\",\n            color: \"#dc3545\",\n            cursor: \"pointer\"\n          },\n          children: \"Reject / Choose manually\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          marginTop: \"1rem\",\n          padding: \"0.8rem 1.5rem\",\n          borderRadius: \"5px\",\n          border: \"none\",\n          backgroundColor: \"#007bff\",\n          color: \"white\",\n          fontSize: \"1rem\",\n          cursor: \"pointer\",\n          transition: \"background-color 0.3s ease\"\n        },\n        disabled: loading,\n        children: loading ? \"Processing...\" : \"Encode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: \"1rem\",\n        padding: \"0.5rem\",\n        borderRadius: \"4px\",\n        backgroundColor: \"#e9ecef\",\n        whiteSpace: \"pre-wrap\"\n      },\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), encodedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\",\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Encoded Image Preview:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: encodedImage,\n        alt: \"Encoded\",\n        style: {\n          maxWidth: \"100%\",\n          height: \"auto\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"8px\",\n          marginTop: \"0.5rem\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: encodedImage,\n        download: \"encoded.png\",\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1rem\",\n          padding: \"0.5rem 1rem\",\n          borderRadius: \"5px\",\n          border: \"1px solid #007bff\",\n          backgroundColor: \"transparent\",\n          color: \"#007bff\",\n          textDecoration: \"none\",\n          cursor: \"pointer\"\n        },\n        children: \"Download Encoded Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n_s(Encode, \"FCF+14l9oBrT/lQk82YCDlnbVMw=\");\n_c = Encode;\nexport default Encode;\nvar _c;\n$RefreshReg$(_c, \"Encode\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Encode","_s","inputType","setInputType","text","setText","imageFile","setImageFile","medium","setMedium","confidentiality","setConfidentiality","allowAI","setAllowAI","aiDecision","setAIDecision","confirmed","setConfirmed","manualEncoding","setManualEncoding","response","setResponse","loading","setLoading","encodedImage","setEncodedImage","getAIDecision","formData","FormData","append","res","fetch","method","body","data","json","ok","message","err","console","error","handleEncode","e","preventDefault","encoded_image_url","toggleAllowAI","style","maxWidth","margin","padding","children","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","display","flexDirection","gap","value","onChange","target","width","borderRadius","border","placeholder","rows","color","alignItems","type","checked","marginTop","backgroundColor","onClick","marginRight","cursor","fontSize","transition","disabled","whiteSpace","src","alt","height","href","download","textDecoration","_c","$RefreshReg$"],"sources":["D:/PROJECT CS/unified-stego-system/frontend/src/components/Encode.js"],"sourcesContent":["    import React, { useState } from \"react\";\r\n\r\n    function Encode() {\r\n      const [inputType, setInputType] = useState(\"text\"); // \"text\" or \"image\"\r\n      const [text, setText] = useState(\"\");\r\n      const [imageFile, setImageFile] = useState(null); // For image input type (future use)\r\n      const [medium, setMedium] = useState(\"WhatsApp\");\r\n      const [confidentiality, setConfidentiality] = useState(\"casual\");\r\n      const [allowAI, setAllowAI] = useState(true);\r\n      const [aiDecision, setAIDecision] = useState(null);\r\n      const [confirmed, setConfirmed] = useState(false);\r\n      const [manualEncoding, setManualEncoding] = useState(\"pdf\"); // Manual choice (future use for other types)\r\n      const [response, setResponse] = useState(\"\");\r\n      const [loading, setLoading] = useState(false);\r\n      const [encodedImage, setEncodedImage] = useState(null); // Stores the URL of the encoded image\r\n\r\n      // Step 1: Ask AI decision if allowed\r\n      const getAIDecision = async () => {\r\n        setLoading(true);\r\n        setResponse(\"\");\r\n        setEncodedImage(null); // Clear previous image on new attempt\r\n\r\n        let formData = new FormData();\r\n        // Append all relevant form data for AI decision\r\n        formData.append(\"inputType\", inputType); // Send inputType for AI decision as well\r\n        formData.append(\"medium\", medium);\r\n        formData.append(\"confidentiality\", confidentiality);\r\n        formData.append(\"allowAI\", allowAI);\r\n\r\n        try {\r\n          const res = await fetch(\"http://localhost:5000/decide_encoding\", {\r\n            method: \"POST\",\r\n            body: formData, // Use FormData for Flask's request.form\r\n          });\r\n          const data = await res.json();\r\n          if (res.ok) { // Check if the response status is successful (2xx)\r\n            setAIDecision(data.aiDecision);\r\n            setResponse(data.message);\r\n          } else {\r\n            setResponse(`Error: ${data.message || 'Failed to get AI decision.'}`);\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error fetching AI decision:\", err);\r\n          setResponse(\"Error connecting to server for AI decision.\");\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      // Step 2: User confirms AI decision or chooses own encoding\r\n      const handleEncode = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // If AI is allowed and not yet confirmed, first trigger AI decision\r\n        if (allowAI && aiDecision === null) {\r\n          await getAIDecision();\r\n          // Do not proceed with encoding immediately after getting AI decision\r\n          // The user needs to confirm, which will trigger handleEncode again.\r\n          return;\r\n        }\r\n\r\n        // If AI is allowed and a decision has been made, but not confirmed,\r\n        // it means the user clicked 'Encode' again *after* seeing the AI suggestion\r\n        // without clicking 'Confirm'. So, we assume they want to proceed with the AI decision.\r\n        if (allowAI && aiDecision !== null && !confirmed) {\r\n            setConfirmed(true); // Auto-confirm AI decision if 'Encode' clicked after suggestion\r\n        }\r\n\r\n\r\n        setLoading(true);\r\n        setResponse(\"\");\r\n        setEncodedImage(null); // Clear previous image on new attempt\r\n\r\n        let formData = new FormData();\r\n        formData.append(\"inputType\", inputType);\r\n\r\n        if (inputType === \"text\") {\r\n          formData.append(\"text\", text);\r\n        } else if (inputType === \"image\" && imageFile) {\r\n          // This part is for future image-in-image encoding\r\n          formData.append(\"image\", imageFile);\r\n        }\r\n\r\n        formData.append(\"medium\", medium);\r\n        formData.append(\"confidentiality\", confidentiality);\r\n        formData.append(\"allowAI\", allowAI);\r\n        // Pass the actual encoding method to the backend\r\n        formData.append(\"encoding\", allowAI && confirmed ? aiDecision : manualEncoding);\r\n\r\n        try {\r\n          const res = await fetch(\"http://localhost:5000/encode\", {\r\n            method: \"POST\",\r\n            body: formData, // Use FormData for Flask's request.form\r\n          });\r\n          const data = await res.json();\r\n          if (res.ok) { // Check if the response status is successful (2xx)\r\n            setResponse(data.message);\r\n            if (data.encoded_image_url) {\r\n              setEncodedImage(data.encoded_image_url);\r\n            } else {\r\n              setEncodedImage(null);\r\n            }\r\n          } else {\r\n            setResponse(`Error: ${data.message || 'Encoding failed.'}`);\r\n            setEncodedImage(null);\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Error during encoding:\", err);\r\n          setResponse(\"Error connecting to server for encoding.\");\r\n          setEncodedImage(null);\r\n        } finally {\r\n          setLoading(false);\r\n          setConfirmed(false); // Reset confirmation state after encoding attempt\r\n          setAIDecision(null); // Reset AI decision as well\r\n        }\r\n      };\r\n\r\n      // Reset AI decision and confirmation when AI permission toggled\r\n      const toggleAllowAI = () => {\r\n        setAllowAI(!allowAI);\r\n        setAIDecision(null);\r\n        setConfirmed(false);\r\n      };\r\n\r\n      return (\r\n        <div style={{ maxWidth: \"500px\", margin: \"auto\", padding: \"1rem\" }}>\r\n          <h2 style={{ marginBottom: \"1rem\", textAlign: \"center\" }}>Encode Your Message</h2>\r\n          <form onSubmit={handleEncode} style={{ display: \"flex\", flexDirection: \"column\", gap: \"1rem\" }}>\r\n            <label>\r\n              Choose Input Type:\r\n              <select\r\n                value={inputType}\r\n                onChange={(e) => {\r\n                  setInputType(e.target.value);\r\n                  setText(\"\"); // Clear text when switching type\r\n                  setImageFile(null); // Clear image when switching type\r\n                }}\r\n                style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\r\n              >\r\n                <option value=\"text\">Text</option>\r\n                {/* <option value=\"image\">Image</option> This is not fully supported yet in backend */}\r\n              </select>\r\n            </label>\r\n\r\n            {inputType === \"text\" && (\r\n              <textarea\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n                placeholder=\"Enter your secret message\"\r\n                rows={4}\r\n                style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\r\n              />\r\n            )}\r\n\r\n            {inputType === \"image\" && (\r\n              <p style={{ color: \"red\" }}>Currently only text input supported for encoding.</p>\r\n              // <input\r\n              //   type=\"file\"\r\n              //   accept=\"image/*\"\r\n              //   onChange={(e) => setImageFile(e.target.files[0])}\r\n              //   style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\r\n              // />\r\n            )}\r\n\r\n            <label>\r\n              Medium:\r\n              <select\r\n                value={medium}\r\n                onChange={(e) => setMedium(e.target.value)}\r\n                style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\r\n              >\r\n                <option value=\"WhatsApp\">WhatsApp</option>\r\n                <option value=\"Email\">Email</option>\r\n                <option value=\"Telegram\">Telegram</option>\r\n                <option value=\"Other\">Other</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label>\r\n              Confidentiality:\r\n              <select\r\n                value={confidentiality}\r\n                onChange={(e) => setConfidentiality(e.target.value)}\r\n                style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\r\n              >\r\n                <option value=\"casual\">Casual</option>\r\n                <option value=\"professional\">Professional</option>\r\n                <option value=\"high\">High Security</option>\r\n              </select>\r\n            </label>\r\n\r\n            <label style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={allowAI}\r\n                onChange={toggleAllowAI}\r\n              />\r\n              Allow AI to decide encoding method\r\n            </label>\r\n\r\n            {!allowAI && (\r\n              <label>\r\n                Choose Encoding Manually:\r\n                <select\r\n                  value={manualEncoding}\r\n                  onChange={(e) => setManualEncoding(e.target.value)}\r\n                  style={{ width: \"100%\", padding: \"0.5rem\", borderRadius: \"4px\", border: \"1px solid #ccc\" }}\r\n                >\r\n                  <option value=\"pdf\">PDF</option>\r\n                  <option value=\"image\">Image</option>\r\n                  <option value=\"qr\">QR Code</option>\r\n                </select>\r\n              </label>\r\n            )}\r\n\r\n            {/* Show AI decision and ask for confirmation */}\r\n            {allowAI && aiDecision && !confirmed && (\r\n              <div\r\n                style={{\r\n                  marginTop: \"1rem\",\r\n                  backgroundColor: \"#f0f0f0\",\r\n                  padding: \"1rem\",\r\n                  borderRadius: \"8px\",\r\n                  border: \"1px solid #ddd\",\r\n                  textAlign: \"center\"\r\n                }}\r\n              >\r\n                <p style={{ margin: \"0 0 1rem 0\" }}>\r\n                  AI suggests encoding using: <b style={{ color: \"#007bff\" }}>{aiDecision}</b>\r\n                </p>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => setConfirmed(true)}\r\n                  style={{\r\n                    marginRight: \"1rem\",\r\n                    padding: \"0.5rem 1rem\",\r\n                    borderRadius: \"5px\",\r\n                    border: \"none\",\r\n                    backgroundColor: \"#28a745\",\r\n                    color: \"white\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  Confirm\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setAIDecision(null);\r\n                    setConfirmed(false);\r\n                  }}\r\n                  style={{\r\n                    padding: \"0.5rem 1rem\",\r\n                    borderRadius: \"5px\",\r\n                    border: \"1px solid #dc3545\",\r\n                    backgroundColor: \"transparent\",\r\n                    color: \"#dc3545\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  Reject / Choose manually\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            <button\r\n              type=\"submit\"\r\n              style={{\r\n                marginTop: \"1rem\",\r\n                padding: \"0.8rem 1.5rem\",\r\n                borderRadius: \"5px\",\r\n                border: \"none\",\r\n                backgroundColor: \"#007bff\",\r\n                color: \"white\",\r\n                fontSize: \"1rem\",\r\n                cursor: \"pointer\",\r\n                transition: \"background-color 0.3s ease\",\r\n              }}\r\n              disabled={loading}\r\n            >\r\n              {loading ? \"Processing...\" : \"Encode\"}\r\n            </button>\r\n          </form>\r\n\r\n          {response && (\r\n            <p style={{ marginTop: \"1rem\", padding: \"0.5rem\", borderRadius: \"4px\", backgroundColor: \"#e9ecef\", whiteSpace: \"pre-wrap\" }}>\r\n              {response}\r\n            </p>\r\n          )}\r\n\r\n          {/* Encoded Image Preview */}\r\n          {encodedImage && (\r\n            <div style={{ marginTop: \"1rem\", textAlign: \"center\" }}>\r\n              <h3>Encoded Image Preview:</h3>\r\n              <img\r\n                src={encodedImage}\r\n                alt=\"Encoded\"\r\n                style={{ maxWidth: \"100%\", height: \"auto\", border: \"1px solid #ccc\", borderRadius: \"8px\", marginTop: \"0.5rem\" }}\r\n              />\r\n              <br />\r\n              <a\r\n                href={encodedImage}\r\n                download=\"encoded.png\"\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  marginTop: \"1rem\",\r\n                  padding: \"0.5rem 1rem\",\r\n                  borderRadius: \"5px\",\r\n                  border: \"1px solid #007bff\",\r\n                  backgroundColor: \"transparent\",\r\n                  color: \"#007bff\",\r\n                  textDecoration: \"none\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                Download Encoded Image\r\n              </a>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    export default Encode;\r\n    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}